Preparação

Comando cat /proc/asound/cards 
A primeira Coluna é o número do Dispositivo no Alsa
Comando lsusb para averiguar se a placa de som foi identificada
O dispositvo na lista possue um par de números hexadecimal:
  vid(Vendor ID) e pid(Product ID)

Eles serão utilizados para configurar o dispositivo

Método mais complicado:
 sudo lsusb -v | less 


Configurando:

sudo gedit /etc/modprobe.d/alsa-base 
Ir a linha e comentar para previnir que o USB device ganhe a primeira porta de audio
  options snd-usb-audio index=-2 

Ao final do arquivo configuramos a ordem que os dispositivos serão listados
  alias snd-card-0 snd-hda-intel
  alias snd-card-1 snd-usb-audio
  alias snd-card-2 snd-usb-audio
  alias snd-card-3 snd-usb-audio
  alias snd-card-4 snd-usb-audio

Para configurar apenas uma interface
  options snd-usb-audio index=1 vid=0x046d pid=0x08c6

Para configurar múltiplas interfaces
  options snd-usb-audio index=1,2,3,...''n'' vid=0x<vid1>,0x<vid2>,0x<vid3>,...0x<vid''n''>\ pid=0x<pid1>,0x<pid2>,0x<pid3>,...0x<pid''n''>

Fazendo Merge de Duas Placas
http://alsa.opensrc.org/TwoCardsAsOne
http://jackaudio.org/multiple_devices


arecord -f cd -D multi -c 4 | aplay -D multi
jackd [-a] -R [-v] -d alsa -d ttable [-p 1024]

You will need to use a text editor to create or add to your ~/.asoundrc file. This file is read by any ALSA application (including JACK, if its using the ALSA backend) and can be used to define pseudo-devices of many different kinds. The key idea here is that you're going to define a new pseudo-device composed of 2 or more other devices. In our example, we'll just focus on 2 devices being merged into 1, where both devices have just 2 channels in and out. This is the text you need to make sure is in ~/.asoundrc (below, we describe what this does): 

pcm.merge {
    type multi;
    slaves.a.pcm hw:0
    slaves.a.channels 2;
    slaves.b.pcm hw:1
    slaves.b.channels 2;
    bindings.0.slave a;
    bindings.0.channel 0;
    bindings.1.slave b;
    bindings.1.channel 0;
    bindings.2.slave a;
    bindings.2.channel 1;
    bindings.3.slave b;
    bindings.3.channel 1;
}


Lets see what this does.

    It defines a new audio pseudo-device called "merge". You can use this name anywhere you might use the name of an ALSA audio device, such as "hw:0" or "hw:HDA" or "hw:DSP" or "plughw:1".
    It names "hw:0" as the first component (or "slave") of this pseudo-device (slave.a.pcm) and "hw:1" as the second component (slave.b.pcm)
    It states that the pseudo-device will use 2 channels from the first component and 2 channels from the 2nd component.
    The lines contains binding. list, in order, which channel of which component will correspond to the 4 channels of the pseudo-device. In the mapping shown above, the first channel comes from the first component, then the 2nd channel from the 2nd component, the 3rd from the first component and the 4th from the second component. 

Note that numbering of devices and channels in ALSA starts at zero, not one.

The most important and complex part of the above definition is the channel mappings defined by the bindings lines. A full channel mapping definition consists of a pair of a lines of the following general form:

	bindings.CHANNEL_OF_PSEUDO_DEVICE.slave SLAVE_DEVICE_THAT_WILL_PROVIDE_THIS_CHANNEL
	bindings.CHANNEL_OF_PSEUDO_DEVICE.channel CHANNEL_OF_SLAVE_DEVICE_THAT_WILL_PROVIDE_THIS_CHANNEL

So the specific pair of lines:

    bindings.0.slave a;
    bindings.0.channel 0;

mean that "channel 0 of the pseudo-device will correspond to channel 0 of the first slave device". Obviously by playing with this definition you can create all sorts of wierd and wonderful mappings from the real physical device channels to the pseudo-device channels. You probably don't want to do that, though. The example above shows the most common example: take the first N channels from the first device, and the second M channels from the second device. 


The Control Pseudo-device

In theory, the above is enough to define a new pseudo-device, but many applications, including JACK's ALSA backend, also want to open a "control device" associated with the audio playback device. This is where they can find out (and possibly control) various hardware parameters associated with the device. Unfortunately there is no way to merge these together in the same way, so we have to provide a "dummy" control device definition that will keep such applications happy. This definition looks like this:

ctl.merge {
    type hw
    card 0
}

Notice that name following the ctl. text must be the same as the name following pcm. in the device definition above. The control device definition we've given here effectively means "if you want to open the control device associated with "merge", open the control device associated with the first installed audio/MIDI device". This probably isn't right of course - "merge" involves two cards - but it will generally work just fine.

You can use this same approach to merge more than 2 devices - the resulting pcm.DEVICE-NAME specification will obviously include more lines. You can also use different devices than we did above, where we just used the first and second installed card.
"Slave" Device naming

Note that you are likely better off using "hw:CARD" device names, rather than "hw:N" names, when defining a "multi" pseudo-device, as explained here. But further note that if you are using multiple instances of the same type of audio hardware (say, 4 RME Multiface devices), you will have to use "hw:N" because every card will have the same "CARD" name. In fact, with such hardware, it may be very difficult to ensure that "hw:0" always refers to the same audio interface, because there is no ALSA name that uniquely defines a particular PCI slot. This is currently an unsolved problem when using multiple identical devices. If you use PCI (or PCIe or PCIx or other derivatives of PCI) devices, the chances are that the first card will always be the same one, and so forth, so its not likely to be an issue. If you use several identical USB devices, it may be a more significant problem.
4. Using the -P and -C arguments to a JACK backend

Several JACK backends, including the ALSA, FFADO and CoreAudio versions, support the -P and -C arguments that can be used to specify two different devices, one for playback and one for capture/recording. You cannot use this to merge multiple devices for playback or capture. This approach will not do any clock drift correction, so as the two devices drift over time, you may get glitches in the audio stream. Nevertheless, it can be an easy if unreliable way to set up JACK so that, for example, it records from a USB microphone and plays back via a builtin audio device.

When using -P or -C to specify different devices, do not use the -d argument (which specifies a single device) and do not use the -D argument (which tells JACK to configure a device for playback & capture). 
http://alsa.opensrc.org/Udev#Example_to_map_USB_Ports_to_ALSA_card_numbers_and_add_each_sound_card_to_a_combined.2C_single_interface_device
